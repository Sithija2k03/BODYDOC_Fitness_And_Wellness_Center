import React, { useEffect, useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useGlobalContext } from '../../context/globalContext';
import styled from 'styled-components';
import Button from '../Button/Button';

function EditSupplier() {
    const { supplierId } = useParams();  // Get supplierId from URL
    const navigate = useNavigate();
    const { suppliers, updateSupplier, getSuppliers, loading, error } = useGlobalContext();

    const [supplier, setSupplier] = useState({
        supplier_name: '',
        contact: '',
        credits: '',
        supplyCategory: '',
    });

    // Fetch suppliers if not loaded
    useEffect(() => {
        if (suppliers.length === 0) {
            getSuppliers();  // Fetch suppliers if the list is empty
        }
    }, [suppliers, getSuppliers]); // Only re-run if suppliers array changes

    // Update supplier form when supplierId changes or when suppliers are loaded
    useEffect(() => {
        console.log('Suppliers:', suppliers);
        console.log('Supplier ID from URL:', supplierId);
    
        if (suppliers.length > 0 && supplierId) {
            // Ensure we match either the manually entered ID or the autogenerated one
            const foundSupplier = suppliers.find(s => 
                s.supplier_id.toString() === supplierId.toString() || 
                s.manual_id?.toString() === supplierId.toString()
            );
    
            console.log('Found Supplier:', foundSupplier);
    
            if (foundSupplier) {
                setSupplier({
                    supplier_id: foundSupplier.supplier_id,  // Ensure the correct ID is stored
                    supplier_name: foundSupplier.supplier_name,
                    contact: foundSupplier.contact,
                    credits: foundSupplier.credits,
                    supplyCategory: foundSupplier.supplyCategory,
                });
            } else {
                console.error('Supplier not found for ID:', supplierId);
            }
        }
    }, [suppliers, supplierId]);
    

    // Show loading state
    if (loading) {
        return <div>Loading suppliers...</div>;
    }

    // Handle any errors
    if (error) {
        return <div>Error: {error}</div>;
    }

    const handleChange = (e) => {
        setSupplier({ ...supplier, [e.target.name]: e.target.value });
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        
        // Ensure correct supplier ID is used
        const correctId = supplier.supplier_id || supplierId;
        
        if (!correctId) {
            console.error("No valid supplier ID found!");
            return;
        }
    
        await updateSupplier(correctId, supplier);
         navigate('/admin/Supplier'); // Navigate only after update completes


    };
    
    

    return (
        <EditSupplierStyled>
            <h2>Edit Supplier Details</h2>
            <form onSubmit={handleSubmit}>
                <label>Supplier Name</label>
                <input 
                    type="text" 
                    name="supplier_name" 
                    value={supplier.supplier_name} 
                    onChange={handleChange} 
                    required 
                />

                <label>Contact</label>
                <input 
                    type="text" 
                    name="contact" 
                    value={supplier.contact} 
                    onChange={handleChange} 
                    required 
                />

                <label>Credits</label>
                <input 
                    type="number" 
                    name="credits" 
                    value={supplier.credits} 
                    onChange={handleChange} 
                    required 
                />

                <label>Supply Category</label>
                <input 
                    type="text" 
                    name="supplyCategory" 
                    value={supplier.supplyCategory} 
                    onChange={handleChange} 
                    required 
                />

                <Button type="submit" name="Update Supplier" />

                <Button type="button" name="Cancel" bg="#ccc" color="#000" onClick={() => navigate('/admin/dashboard')} />
            </form>
        </EditSupplierStyled>
    );
}

const EditSupplierStyled = styled.div`
    max-width: 500px;
    margin: auto;
    padding: 2rem;
    background: white;
    border-radius: 10px;
    box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);

    h2 {
        text-align: center;
    }

    form {
        display: flex;
        flex-direction: column;
    }

    label {
        margin-top: 10px;
    }

    input {
        padding: 10px;
        margin-top: 5px;
        border: 1px solid #ddd;
        border-radius: 5px;
    }

    button {
        margin-top: 20px;
    }
`;

export default EditSupplier;
